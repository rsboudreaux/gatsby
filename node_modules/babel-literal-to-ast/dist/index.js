'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = astify;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _babylon = require('babylon');

var babylon = _interopRequireWildcard(_babylon);

var _babelTraverse = require('babel-traverse');

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function astify(literal) {
  if (literal === null) {
    return t.nullLiteral();
  }
  switch (typeof literal === 'undefined' ? 'undefined' : _typeof(literal)) {
    case 'function':
      var ast = babylon.parse(literal.toString(), {
        allowReturnOutsideFunction: true,
        allowSuperOutsideMethod: true
      });
      return _babelTraverse2.default.removeProperties(ast);
    case 'number':
      return t.numericLiteral(literal);
    case 'string':
      return t.stringLiteral(literal);
    case 'boolean':
      return t.booleanLiteral(literal);
    case 'undefined':
      return t.unaryExpression('void', t.numericLiteral(0), true);
    default:
      if (Array.isArray(literal)) {
        return t.arrayExpression(literal.map(astify));
      }
      return t.objectExpression(Object.keys(literal).filter(function (k) {
        return typeof literal[k] !== 'undefined';
      }).map(function (k) {
        return t.objectProperty(t.stringLiteral(k), astify(literal[k]));
      }));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJhc3RpZnkiLCJ0IiwiYmFieWxvbiIsImxpdGVyYWwiLCJudWxsTGl0ZXJhbCIsImFzdCIsInBhcnNlIiwidG9TdHJpbmciLCJhbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbiIsImFsbG93U3VwZXJPdXRzaWRlTWV0aG9kIiwicmVtb3ZlUHJvcGVydGllcyIsIm51bWVyaWNMaXRlcmFsIiwic3RyaW5nTGl0ZXJhbCIsImJvb2xlYW5MaXRlcmFsIiwidW5hcnlFeHByZXNzaW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyYXlFeHByZXNzaW9uIiwibWFwIiwib2JqZWN0RXhwcmVzc2lvbiIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrIiwib2JqZWN0UHJvcGVydHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQUl3QkEsTTs7QUFKeEI7O0lBQVlDLEM7O0FBQ1o7O0lBQVlDLE87O0FBQ1o7Ozs7Ozs7O0FBRWUsU0FBU0YsTUFBVCxDQUFnQkcsT0FBaEIsRUFBeUI7QUFDdEMsTUFBSUEsWUFBWSxJQUFoQixFQUFzQjtBQUNwQixXQUFPRixFQUFFRyxXQUFGLEVBQVA7QUFDRDtBQUNELGlCQUFlRCxPQUFmLHlDQUFlQSxPQUFmO0FBQ0EsU0FBSyxVQUFMO0FBQ0UsVUFBTUUsTUFBTUgsUUFBUUksS0FBUixDQUFjSCxRQUFRSSxRQUFSLEVBQWQsRUFBa0M7QUFDNUNDLG9DQUE0QixJQURnQjtBQUU1Q0MsaUNBQXlCO0FBRm1CLE9BQWxDLENBQVo7QUFJQSxhQUFPLHdCQUFTQyxnQkFBVCxDQUEwQkwsR0FBMUIsQ0FBUDtBQUNGLFNBQUssUUFBTDtBQUNFLGFBQU9KLEVBQUVVLGNBQUYsQ0FBaUJSLE9BQWpCLENBQVA7QUFDRixTQUFLLFFBQUw7QUFDRSxhQUFPRixFQUFFVyxhQUFGLENBQWdCVCxPQUFoQixDQUFQO0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBT0YsRUFBRVksY0FBRixDQUFpQlYsT0FBakIsQ0FBUDtBQUNGLFNBQUssV0FBTDtBQUNFLGFBQU9GLEVBQUVhLGVBQUYsQ0FBa0IsTUFBbEIsRUFBMEJiLEVBQUVVLGNBQUYsQ0FBaUIsQ0FBakIsQ0FBMUIsRUFBK0MsSUFBL0MsQ0FBUDtBQUNGO0FBQ0UsVUFBSUksTUFBTUMsT0FBTixDQUFjYixPQUFkLENBQUosRUFBNEI7QUFDMUIsZUFBT0YsRUFBRWdCLGVBQUYsQ0FBa0JkLFFBQVFlLEdBQVIsQ0FBWWxCLE1BQVosQ0FBbEIsQ0FBUDtBQUNEO0FBQ0QsYUFBT0MsRUFBRWtCLGdCQUFGLENBQW1CQyxPQUFPQyxJQUFQLENBQVlsQixPQUFaLEVBQ3ZCbUIsTUFEdUIsQ0FDaEIsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2IsZUFBTyxPQUFPcEIsUUFBUW9CLENBQVIsQ0FBUCxLQUFzQixXQUE3QjtBQUNELE9BSHVCLEVBSXZCTCxHQUp1QixDQUluQixVQUFDSyxDQUFELEVBQU87QUFDVixlQUFPdEIsRUFBRXVCLGNBQUYsQ0FDTHZCLEVBQUVXLGFBQUYsQ0FBZ0JXLENBQWhCLENBREssRUFFTHZCLE9BQU9HLFFBQVFvQixDQUFSLENBQVAsQ0FGSyxDQUFQO0FBSUQsT0FUdUIsQ0FBbkIsQ0FBUDtBQW5CRjtBQThCRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHQgZnJvbSAnYmFiZWwtdHlwZXMnO1xuaW1wb3J0ICogYXMgYmFieWxvbiBmcm9tICdiYWJ5bG9uJztcbmltcG9ydCB0cmF2ZXJzZSBmcm9tICdiYWJlbC10cmF2ZXJzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzdGlmeShsaXRlcmFsKSB7XG4gIGlmIChsaXRlcmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHQubnVsbExpdGVyYWwoKTtcbiAgfVxuICBzd2l0Y2ggKHR5cGVvZiBsaXRlcmFsKSB7XG4gIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICBjb25zdCBhc3QgPSBiYWJ5bG9uLnBhcnNlKGxpdGVyYWwudG9TdHJpbmcoKSwge1xuICAgICAgYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246IHRydWUsXG4gICAgICBhbGxvd1N1cGVyT3V0c2lkZU1ldGhvZDogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhdmVyc2UucmVtb3ZlUHJvcGVydGllcyhhc3QpO1xuICBjYXNlICdudW1iZXInOlxuICAgIHJldHVybiB0Lm51bWVyaWNMaXRlcmFsKGxpdGVyYWwpO1xuICBjYXNlICdzdHJpbmcnOlxuICAgIHJldHVybiB0LnN0cmluZ0xpdGVyYWwobGl0ZXJhbCk7XG4gIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIHJldHVybiB0LmJvb2xlYW5MaXRlcmFsKGxpdGVyYWwpO1xuICBjYXNlICd1bmRlZmluZWQnOlxuICAgIHJldHVybiB0LnVuYXJ5RXhwcmVzc2lvbigndm9pZCcsIHQubnVtZXJpY0xpdGVyYWwoMCksIHRydWUpO1xuICBkZWZhdWx0OlxuICAgIGlmIChBcnJheS5pc0FycmF5KGxpdGVyYWwpKSB7XG4gICAgICByZXR1cm4gdC5hcnJheUV4cHJlc3Npb24obGl0ZXJhbC5tYXAoYXN0aWZ5KSk7XG4gICAgfVxuICAgIHJldHVybiB0Lm9iamVjdEV4cHJlc3Npb24oT2JqZWN0LmtleXMobGl0ZXJhbClcbiAgICAgIC5maWx0ZXIoKGspID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBsaXRlcmFsW2tdICE9PSAndW5kZWZpbmVkJztcbiAgICAgIH0pXG4gICAgICAubWFwKChrKSA9PiB7XG4gICAgICAgIHJldHVybiB0Lm9iamVjdFByb3BlcnR5KFxuICAgICAgICAgIHQuc3RyaW5nTGl0ZXJhbChrKSxcbiAgICAgICAgICBhc3RpZnkobGl0ZXJhbFtrXSlcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcbiAgfVxufVxuIl19